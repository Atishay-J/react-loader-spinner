"use strict";(self.webpackChunkrls_docs=self.webpackChunkrls_docs||[]).push([[894],{5888:(e,r,t)=>{t.d(r,{oD:()=>o});const i=e=>({height:"Height of the "+e+" svg. For more customization use wrapper className ",width:"Width of the "+e+" svg. For more customization use wrapper className ",colors:"Colors of the "+e+" svg. Takes multiple colors object. If complete list of colors is not provided default will be used. Refer example.",color:"Color of the "+e+" svg",ariaLabel:"Aria label of the "+e+". Will be used for the aria-label attribute in the wrapper element",wrapperStyle:"Styles to be applied to the wrapper. It should be a valid CSS object. It can be used for custom styling. It will override the default style",wrapperClassName:"ClassName to be applied to the wrapper. It can be used for custom styling. It will override the default style",visible:"Whether the "+e+" is visible or not. If false, the "+e+" will not be rendered.",radius:"Radius of the circle(s) in "+e+" component. For more customization use wrapper className "}),a={height:"number | string",width:"number | string",colors:"Array<string>",color:"string: #hex-code",secondaryColor:"string: #hex-code",ariaLabel:"string",wrapperStyle:"object",wrapperClassName:"string",visible:"boolean",radius:"number | string",strokeWidth:"number | string",strokeColor:"string"},s=e=>({height:"80",width:"80",color:"#4fa94d",secondaryColor:"#4fa94d",ariaLabel:e+"-loading",wrapperStyle:JSON.stringify({},null,2),wrapperClassName:"undefined",visible:"true"}),o=function(e,r){return void 0===r&&(r=[]),[{name:"height",type:a.height,default:s(e).height,description:i(e).height},{name:"width",type:a.width,default:s(e).width,description:i(e).width},{name:"colors",type:a.colors,default:JSON.stringify(["#4fa94d","#4fa94d","#4fa94d"]),description:i(e).colors},{name:"ariaLabel",type:a.ariaLabel,default:s(e).ariaLabel,description:i(e).ariaLabel},{name:"wrapperStyle",type:a.wrapperStyle,default:s(e).wrapperStyle,description:i(e).wrapperStyle},{name:"wrapperClassName",type:a.wrapperClassName,default:s(e).wrapperClassName,description:i(e).wrapperClassName},{name:"visible",type:a.visible,default:s(e).visible,description:i(e).visible}].filter((e=>!r.includes(e.name)))}},3637:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>n,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var i=t(7462),a=(t(7294),t(3905)),s=t(2052),o=t(5888);const l={},n="Grid",p={unversionedId:"components/grid",id:"components/grid",title:"Grid",description:"Props",source:"@site/docs/components/grid.mdx",sourceDirName:"components",slug:"/components/grid",permalink:"/react-loader-spinner/docs/components/grid",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fidget Spinner",permalink:"/react-loader-spinner/docs/components/fidget-spinner"},next:{title:"Hearts",permalink:"/react-loader-spinner/docs/components/hearts"}},d={},c=[{value:"Props",id:"props",level:3}],u={toc:c};function m(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"grid"},"Grid"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'<Grid\n  height="80"\n  width="80"\n  color="#4fa94d"\n  ariaLabel="grid-loading"\n  radius="12.5"\n  wrapperStyle={{}}\n  wrapperClass=""\n  visible={true}\n/>\n')),(0,a.kt)("h3",{id:"props"},"Props"),(0,a.kt)(s.Z,{properties:[...(0,o.oD)("grid",["colors"]),{name:"radius",type:"number | string",default:"12.5",description:"Radius of the grid"}],mdxType:"PropsTable"}))}m.isMDXComponent=!0}}]);